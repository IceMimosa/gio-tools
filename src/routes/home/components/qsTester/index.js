import React, { Component } from 'react';
import { connect } from 'dva';
import { routerRedux } from 'dva/router';
import { Layout, Form, Table, Button, Icon, Modal, Row, Col } from 'antd';
import { UnControlled as CodeMirror } from 'react-codemirror2';
import 'codemirror/mode/javascript/javascript';
import 'codemirror/lib/codemirror.css';
import { Diff2Html } from 'diff2html';
import 'diff2html/dist/diff2html.min.css';

import Styles from './index.scss';

const FormItem = Form.Item;
const { Header, Content } = Layout;

class QsTester extends Component {
  constructor(props) {
    super(props);
    this.state = {
      showSampleDiff: false,
      qsBody: '{ }',
    };
  }

  prettyHtml = () => {
    const diffs = '--- a/server/vendor/golang.org/x/sys/unix/zsyscall_linux_mipsle.go\n+++ b/server/vendor/golang.org/x/sys/unix/zsyscall_linux_mipsle.go\n@@ -1035,6 +1035,17 @@ func Prctl(option int, arg2 uintptr, arg3 uintptr, arg4 uintptr, arg5 uintptr) (\n \n // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n \n+func Pselect(nfd int, r *FdSet, w *FdSet, e *FdSet, timeout *Timespec, sigmask *Sigset_t) (n int, err error) {\n+\tr0, _, e1 := Syscall6(SYS_PSELECT6, uintptr(nfd), uintptr(unsafe.Pointer(r)), uintptr(unsafe.Pointer(w)), uintptr(unsafe.Pointer(e)), uintptr(unsafe.Pointer(timeout)), uintptr(unsafe.Pointer(sigmask)))\n+\tn = int(r0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n func read(fd int, p []byte) (n int, err error) {\n \tvar _p0 unsafe.Pointer\n \tif len(p) > 0 {\n';
    return Diff2Html.getPrettyHtml(diffs, {
      inputFormat: 'diff',
      showFiles: true,
      matching: 'lines',
      outputFormat: 'side-by-side',
    });
  }


  render() {
    const { dispatch } = this.props;

    const dataSource = [
      {
        key: '1',
        name: '胡彦斌',
        desc: 'xxx',
        owner: '西湖区湖底公园1号',
      },
      {
        key: '2',
        name: '胡彦祖',
        desc: 'xxx2',
        owner: '西湖区湖底公园1号',
      },
    ];

    const columns = [
      {
        title: '名称',
        dataIndex: 'name',
        key: 'name',
      },
      {
        title: '描述',
        dataIndex: 'desc',
        key: 'desc',
      },
      {
        title: '所属人',
        dataIndex: 'owner',
        key: 'owner',
      },
      {
        title: '创建时间',
        dataIndex: 'createdAt',
        key: 'createdAt',
      },
    ];

    return (
      <div className={Styles.qsTester}>
        <Header className="header">
          <a onClick={() => { dispatch(routerRedux.push({ pathname: '/' })); }}>GrowingIO Tools &gt; QS 测试</a>
        </Header>
        <Content className="content">
          <div className="form">
            <Form layout="inline">
              <FormItem label="">
                <Button type="default" onClick={() => this.setState({ showSampleDiff: true })}>简单测试</Button>
              </FormItem>
              <FormItem label="">
                <Button type="primary"><Icon type="plus" />新建用例</Button>
              </FormItem>
            </Form>
          </div>
          <Table {...this.state} columns={columns} dataSource={dataSource} bordered />
          <Modal
            visible={this.state.showSampleDiff}
            title="简单测试"
            keyboard={false}
            maskClosable={false}
            width={1024}
            onOk={this.handleOk}
            onCancel={() => this.setState({ showSampleDiff: false })}
            footer={null}
          >
            <Row>
              <Col className="req" span={6}>
                <CodeMirror
                  value={this.state.qsBody}
                  onChange={this.codeChange}
                  options={{ mode: 'javascript' }}
                />
              </Col>
              <Col className="res" span={16}>
                <div dangerouslySetInnerHTML={{ __html: this.prettyHtml() }} />
              </Col>
            </Row>
          </Modal>
        </Content>
      </div>
    );
  }
}

export default connect()(QsTester);
